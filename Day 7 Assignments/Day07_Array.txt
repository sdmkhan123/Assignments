Que. 1. find the 2nd largest and the 2nd smallest element without sorting the array.
	#! /bin/bash -x
	declare -a arr
	for (( i=0; i<10; i++ ))
	do
		num=$(( ( RANDOM % 900 )  + 100 ))
		arr[i]=$num
	done
	max1=${arr[0]}
	max2=${arr[0]}
	min1=${arr[0]}
	min2=${arr[0]}
	for (( i=1; i<10; i++ ))
	do
		if [ ${arr[i]} -gt $max1 ]
		then
		        max2=$max1
		        max1=${arr[i]}
		elif [ ${arr[i]} -gt $max2 ]
		then
		        max2=${arr[i]}
		fi
	done
	for (( i=1; i<10; i++ ))
	do
		if [ ${arr[i]} -lt $min1 ]
		then
		        min2=$min1
		        min1=${arr[i]}
		elif [ ${arr[i]} -lt $min2 ]
		then
		        min2=${arr[i]}
		fi
	done
	echo "second min ="$min2
	echo "second max ="$max2

Que. 2. Extend the above program to sort the array and then find the 2nd largest and the 2nd smallest element.
	#! /bin/bash  -x
	declare -a arr
	for (( i=0; i<10; i++ ))
	do
		num=$(( ( RANDOM % 900 )  + 100 ))
		arr[i]=$num
	done
	for ((i = 0; i<10; i++))
	do
		for((j = 0; j<10-i-1; j++))
		do
		        if [ ${arr[j]} -gt ${arr[$((j+1))]} ]
		        then
		                temp=${arr[j]}
		                arr[$j]=${arr[$((j+1))]}  
		                arr[$((j+1))]=$temp
		        fi
		done
	done
	min=${arr[1]}
	max=${arr[8]}
	echo "second min = " $min
	echo "second min = " $max
	
	
Que. 3. Extend the Prime Factorization Program to store all the Prime Factors of a number n into an array and finally display the output.
	#!/bin/bash -x
	declare -a arr
	read -p ":" num
	
	# find the square root of a num: c=$( echo $num | awk '{ print sqrt($num) }' )
	# Convert float to int : n=$(( ${c%.*} + 1 ))
	
	index=0
	for (( i=2; i<=num; i++ ))
	do
		while [ $((num%$i)) == 0 ]
		do
		        arr[index++]=$i
		        num=$((num/$i))
		done
	done
	echo "all the Prime Factors of a number n are:" ${arr[*]}
	
Que. 4. Write a Program to show Sum of three Integer adds to ZERO
	#!/bin/bash -x
	declare -a arr
	arr=("-1" "-3" "5" "6" "2" "4" "-8")
	n=${#arr[*]}
	for (( i=0; i<n; i++ ))
	do
	   for (( j=$i+1; j<n; j++ ))
	   do
	      for (( k=$j+1; k<n; k++ ))
	      do
		 sum=$(( ${arr[i]} + ${arr[j]} + ${arr[k]} ))
		 if [ $sum -eq 0 ]
		 then
		    echo "three integers are: " ${arr[i]} ${arr[j]} ${arr[k]}
		    exit 0
		 fi
	      done
	   done
	done
	
Que. 5. Take a range from 0 â€“ 100, find the digits that are repeated twice like 33, 77, etc and store them in an array
	#!/bin/bash -x
	declare -a arr
	num=11
	index=0
	for (( i=11; i<100; i=$(( i + num )) ))
	do
	   arr[((index++))]=$i
	done
	echo "twice repeated digit numbers are: "${arr[*]}
